using System;
using UnityEngine;
using UnityEngine.InputSystem;

public class GameInput : MonoBehaviour
{

    // singelton
    public static GameInput Instance { get; private set; }

    // an EventHandler delegate in GameInput class so that other classes can grab access and listen to
    public event EventHandler OnInteractAction;
    public event EventHandler OnInteractAlternateAction;
    public event EventHandler OnPauseAction;

    private const string PLAYER_PREF_BINDINGS = "InputBindings";

    public enum Binding
    {
        MoveUp,
        MoveDown,
        MoveLeft,
        MoveRight,
        Interact,
        InteractAlt,
        Pause
    }

    private PlayerInputActions playerInputActions;
    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
        }
        else
        {
            Instance = this;
        }

        /*
         * using the new input system:
         * PlayerInputActions - the Input Actions Asset we created, also a c# code autogenerated 
         * playerInputActions - An instance of the PlayerInputActions Class
         * playerInputActions.Player - an action map we created for handling player input
        */
        playerInputActions = new PlayerInputActions();

        //PlayerPrefs.DeleteKey(PLAYER_PREF_BINDINGS);

        // load the saved bindings from player prefs before the player input actions are enabled
        if (PlayerPrefs.HasKey(PLAYER_PREF_BINDINGS))
        {
            playerInputActions.LoadBindingOverridesFromJson(PlayerPrefs.GetString(PLAYER_PREF_BINDINGS));
        }

        playerInputActions.Player.Enable();

        // subscribe a listener to playerInputActions' Interact performed event, so we know when the interact input action is performed
        playerInputActions.Player.Interact.performed += Interact_performed;
        playerInputActions.Player.InteractAlternate.performed += InteractAlternate_performed;
        playerInputActions.Player.Pause.performed += Pause_performed;
    }


    private void OnDestroy()
    {
        playerInputActions.Player.Interact.performed -= Interact_performed;
        playerInputActions.Player.InteractAlternate.performed -= InteractAlternate_performed;
        playerInputActions.Player.Pause.performed -= Pause_performed;

        playerInputActions.Dispose();
    }

    private void Pause_performed(UnityEngine.InputSystem.InputAction.CallbackContext obj)
    {
        OnPauseAction?.Invoke(this, EventArgs.Empty);
    }

    private void InteractAlternate_performed(UnityEngine.InputSystem.InputAction.CallbackContext obj)
    {
        OnInteractAlternateAction?.Invoke(this, EventArgs.Empty);
    }

    private void Interact_performed(UnityEngine.InputSystem.InputAction.CallbackContext obj)
    {
        OnInteractAction?.Invoke(this, EventArgs.Empty);
    }

    public Vector2 GetTopDownMovementVectorNormalized()
    {
        // read the value as how we define in the action
        Vector2 inputVector = playerInputActions.Player.Move.ReadValue<Vector2>();

        inputVector = inputVector.normalized;

        return inputVector;
    }

    public string GetBindingText(Binding binding)
    {
        switch (binding)
        {
            case Binding.MoveUp:
                return playerInputActions.Player.Move.bindings[1].ToDisplayString();
            case Binding.MoveDown:
                return playerInputActions.Player.Move.bindings[2].ToDisplayString();
            case Binding.MoveLeft:
                return playerInputActions.Player.Move.bindings[3].ToDisplayString();
            case Binding.MoveRight:
                return playerInputActions.Player.Move.bindings[4].ToDisplayString();
            case Binding.Interact:
                return playerInputActions.Player.Interact.bindings[0].ToDisplayString();
            case Binding.InteractAlt:
                return playerInputActions.Player.InteractAlternate.bindings[0].ToDisplayString();
            case Binding.Pause:
                return playerInputActions.Player.Pause.bindings[0].ToDisplayString();
            default:
                return "Unbound";
        }
    }


    public void RebindBinding(Binding binding, Action onActionRebound)
    {
        // start with disabling the player input actions
        playerInputActions.Player.Disable();

        InputAction inputAction = null;
        int bindingIndex = 0;
        
        switch(binding)
        {
            case Binding.MoveUp:
                inputAction = playerInputActions.Player.Move;
                bindingIndex = 1;
                break;
            case Binding.MoveDown:
                inputAction = playerInputActions.Player.Move;
                bindingIndex = 2;
                break;
            case Binding.MoveLeft:
                inputAction = playerInputActions.Player.Move;
                bindingIndex = 3;
                break;
            case Binding.MoveRight:
                inputAction = playerInputActions.Player.Move;
                bindingIndex = 4;
                break;
            case Binding.Interact:
                inputAction = playerInputActions.Player.Interact;
                bindingIndex = 0;
                break;
            case Binding.InteractAlt:
                inputAction = playerInputActions.Player.InteractAlternate;
                bindingIndex = 0;
                break;
            case Binding.Pause:
                inputAction = playerInputActions.Player.Pause;
                bindingIndex = 0;
                break;

            default:
                return;

        }

        inputAction.PerformInteractiveRebinding(bindingIndex)
            .WithCancelingThrough((string) null)    // giving null as a cancel key, so the system will not cancel the rebind when the default Escape key is pressed
            .WithControlsExcluding("Mouse")
            // the OnComplete callback is called when the system receives a rebind input
            .OnComplete(callback =>
            {
                callback.Dispose();     // manually dispose the callback object to avoid memory leak
                playerInputActions.Player.Enable(); // re-enable the player input actions
                onActionRebound?.Invoke();      // invoke the external callback functions

                // save the changes to player Prefs
                PlayerPrefs.SetString(PLAYER_PREF_BINDINGS, playerInputActions.SaveBindingOverridesAsJson());
                PlayerPrefs.Save();
            })
            .Start();
    }
}
